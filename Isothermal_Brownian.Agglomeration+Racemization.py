# -*- coding: utf-8 -*-
"""
Created on Mon May 23 23:32:00 2022

@author: Manos
"""

import time 
import numpy as np
from scipy.integrate import quad,solve_ivp
from numpy import sqrt, pi
import pylab as pp
from pymaxent import maxent_reconstruct_c0_1,maxent_reconstruct_c1_1,temp1,maxent_reconstruct_c0_2,maxent_reconstruct_c1_2,temp2
from plyer import notification

start = time.time()

'''Constants'''
a0 = 3.5e-4
kv = pi/6 
dens = 1300
q0 = 400
q1 = 2500
kr0 = 1e11
Er = 75000

lmeand0 = 0.5
lmeanl0 = 0.5
σd0 = 0.025
σl0 = 0.025

m3d0 = 0.062806
ratio = 1.5
m3l0 = m3d0/ratio

'''Αδιαστατοποίηση'''
Lr = 100e-6 
tr = 3600
Tr = 273
scale = 1e4

Eg = 12000
Ed = 12000
R = 8.314

T = 308

kb = 0.001
kg = 1e-4
kd = 2e-4

Kg = tr/Lr * kg*np.exp(-Eg/(R*T))
Kd = tr/Lr * kd*np.exp(-Ed/(R*T))
Kbg = kb*tr

tol1 = 1e-5 #absolute error
tol2 = 1e-4 #relative error


'''Αρχικοποίση των μεταβλητών'''
tspan=(0, 20)
step = 0.2
resolution = int(tspan[1]/step)
teval = np.linspace(tspan[0],tspan[1],resolution+1)

initial_m_d=[]

for i in range(4):
    def f0_d(λ,i=i):
        return( λ**i* ( m3d0*lmeand0*(lmeand0**2+3*σd0**2)/(sqrt(2*pi*σd0)) * np.exp(-(λ-lmeand0)**2/(2*σd0**2)) )*scale )

    m, err = quad(f0_d, 0, np.inf)
    print('md(',i,')=',m)
    initial_m_d.append(m)


initial_m_l=[]

for i in range(4):
    def f0_l(λ,i=i):
        return( λ**i* ( m3l0*lmeanl0*(lmeanl0**2+3*σl0**2)/(sqrt(2*pi*σl0)) * np.exp(-(λ-lmeanl0)**2/(2*σl0**2)) )*scale )

    m, err = quad(f0_l, 0, np.inf)
    print('ml(',i,')=',m)
    initial_m_l.append(m)

Sd0 = 1
Sl0 = 1
initial_values = [initial_m_d[0],initial_m_d[1],initial_m_d[2],initial_m_d[3],initial_m_l[0],initial_m_l[1],initial_m_l[2],initial_m_l[3],Sd0,Sl0]

ee0 = ( initial_m_d[3] - initial_m_l[3] ) / ( initial_m_d[3] + initial_m_l[3] )


def cinf_d(T): return( q0*np.exp(-q1/T) )
def cinf_l(T): return( q0*np.exp(-q1/T) )

def γ_d(T): return( cinf_d(T)/(Lr**3*kv*dens) )
def γ_l(T): return( cinf_l(T)/(Lr**3*kv*dens) )


'''Growth Term'''
def G_d(Sd,T,L):
    jd =  Sd-1-a0/(L*Lr*T)
    if jd>0: 
        result = Kg * jd 
        return result
    else: 
        result = Kd * jd 
        return result

def G_l(Sl,T,L):
    jl =  Sl-1-a0/(L*Lr*T)
    if jl>0: 
        result = Kg * jl 
        return result
    else: 
        result = Kd * jl 
        return result

'''Agglomeration kernel'''
b0=1
def b(L,l):
    if L<1e-3: return 0
    else: return b0*(L+l)**2/(L*l)
    

'''Racemization rate'''
def Rd(Sl,Sd,T):
    return( tr*kr0*np.exp(-Er/(R*T))*(Sl - Sd) )
def Rl(Sd,Sl,T):
    return( tr*kr0*np.exp(-Er/(R*T))*(Sd - Sl) )

def moments(t,y):
    m0_d=y[0]
    m1_d=y[1]
    m2_d=y[2]
    m3_d=y[3]
    m0_l=y[4]
    m1_l=y[5]
    m2_l=y[6]
    m3_l=y[7]
    Sd=y[8]
    Sl=y[9]

    print("\033[1;31m" + '''current time is''',t,'''s/''',tspan[1],'''s''')
    
    eet1 = (m3_d-m3_l)/(m3_d+m3_l)
    print('\033[32m'+'''enantiomeric excess is''',eet1)
    print('\033[39m')
    
    Lmean_d = np.abs(m1_d/m0_d)
    σd = np.sqrt( np.abs(m2_d-2*Lmean_d*m1_d+Lmean_d**2*m0_d)/m0_d )
    Lmean_l=m1_l/m0_l
    σl=np.sqrt( np.abs(m2_l-2*Lmean_l*m1_l+Lmean_l**2*m0_l)/m0_l )
    
    Lmin_d = max(0,Lmean_d - 3*σd)
    Lmax_d = Lmean_d + 5*σd
    Lmin_l = max(0,Lmean_l - 3*σl)
    Lmax_l = Lmean_l + 5*σl

    bnds_d=[Lmin_d,Lmax_d] 
    sol_d, lambdas_d= maxent_reconstruct_c1_1(mu=y[0:4] ,bnds=bnds_d)
    bnds_l=[Lmin_l,Lmax_l]
    sol_l, lambdas_l= maxent_reconstruct_c1_2(mu=y[4:8] ,bnds=bnds_l)
    
    '''Agg functions'''
    def Ad(L):
        if L<1e-4: return 0
        else: 
            def h1(l):
                u = (L**3-l**3)**(1/3)
                temp = b(u,l)/u**2*sol_d(u)*sol_d(l)
                return temp
            result = quad(h1,bnds_d[0],L,epsabs=tol1,epsrel=tol2)[0]
        return result
    def Al(L):
        if L<1e-4: return 0
        else: 
            def h2(l):
                u = (L**3-l**3)**(1/3)
                temp = b(u,l)/u**2*sol_l(u)*sol_l(l)
                return temp
        result = quad(h2,bnds_l[0],L,epsabs=tol1,epsrel=tol2)[0]
        return result
    
    def cd(L):
        if L<1e-4: return 0
        else:
            def h3(l): return b(L,l)*sol_d(l)
            temp = quad(h3,bnds_d[0],bnds_d[1],epsabs=tol1,epsrel=tol2)[0]
        return temp
    def cl(L):
        if L<1e-4: return 0
        else: 
            def h4(l): return b(L,l)*sol_l(l)
            temp = quad(h4,bnds_l[0],bnds_l[1],epsabs=tol1,epsrel=tol2)[0]
        return temp
    
    
    def md(L,k):
        return L**(k+2)/2*Ad(L)-L**k*sol_d(L)*cd(L)
    def ml(L,k):
        return L**(k+2)/2*Al(L)-L**k*sol_l(L)*cl(L)
    
    k=0
    dm0dt_d = quad(md,bnds_d[0],bnds_d[1],epsabs=tol1,epsrel=tol2,args=(k))[0]
    dm0dt_l = quad(ml,bnds_l[0],bnds_l[1],epsabs=tol1,epsrel=tol2,args=(k))[0]
    k=1
    dm1dt_d = quad(md,bnds_d[0],bnds_d[1],epsabs=tol1,epsrel=tol2,args=(k))[0]
    dm1dt_l = quad(ml,bnds_l[0],bnds_l[1],epsabs=tol1,epsrel=tol2,args=(k))[0]
    k=2
    dm2dt_d = quad(md,bnds_d[0],bnds_d[1],epsabs=tol1,epsrel=tol2,args=(k))[0]
    dm2dt_l = quad(ml,bnds_l[0],bnds_l[1],epsabs=tol1,epsrel=tol2,args=(k))[0]
    k=3
    dm3dt_d = quad(md,bnds_d[0],bnds_d[1],epsabs=tol1,epsrel=tol2,args=(k))[0]
    dm3dt_l = quad(ml,bnds_l[0],bnds_l[1],epsabs=tol1,epsrel=tol2,args=(k))[0]

    
    dSddt = -1/(scale*Lr**3*γ_d(T))*dm3dt_d + Rd(Sd,Sl,T)
    dSldt = -1/(scale*Lr**3*γ_l(T))*dm3dt_l + Rl(Sd,Sl,T)
    
    print('[Lmin_d,Lmax_d] = ',[Lmin_d,Lmax_d])
    print('[Lmin_l,Lmax_l] = ',[Lmin_l,Lmax_l])
    print('dmkdt = \n',[dm0dt_d,dm0dt_l], '\n', [dm1dt_d,dm1dt_l], '\n', [dm2dt_d,dm2dt_l], '\n', [dm3dt_d,dm3dt_l])
    
    return(dm0dt_d,dm1dt_d,dm2dt_d,dm3dt_d,dm0dt_l,dm1dt_l,dm2dt_l,dm3dt_l,dSddt,dSldt)
    

r = solve_ivp(moments ,tspan, initial_values, method='BDF',t_eval=teval, jac=None, rtol=1e-4)



'''Supersaturation'''
pp.figure(4)
pp.plot(r.t,r.y[8,:],'-')
pp.plot(r.t,r.y[9,:],'-')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Supersaturations',{"fontsize":16})
pp.legend(('Sd','Sl'),loc=0)
pp.show()

'''Enantiomeric Excess'''
eet = (r.y[3,:] - r.y[7,:])/(r.y[3,:] + r.y[7,:])
pp.figure(5)
pp.plot(r.t,eet)
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Enantiomeric Excess',{"fontsize":16})
pp.show()



end=time.time()
print('''total time is ''', (end-start)/60, '''min''')

'''End of script notification'''

message= 'Script has finished running'
notification.notify(message= message,
                    app_icon = None,
                    timeout= 10,
                    toast=False)


'''Σύγκριση με δεδομένα από μοντέλο Comsol'''

m0c_d = [12.494396307000189		,
 2.0619609476749545        ,
 1.0946898631480826        ,
 0.7427092680919714        ,
 0.5616223864347755        ,
 0.45146387318520476       ,
 0.3774130271774055        ,
 0.32413327913549367       ,
 0.2840091852300725        ,
 0.25270869570839605       ,
 0.22761353684299615       ,
 0.20704768678417543       ,
 0.18988842495015917       ,
 0.175355410962225         ,
 0.1628894621610147        ,
 0.15207943011562045       ,
 0.1426162874277281        ,
 0.13426330473939904       ,
 0.12683609272861374       ,
 0.12018891052278573       ,
 0.11420505237509117       ,
 0.108789967513687         ,
 0.10386624585453667       ,
 0.09936990531387468       ,
 0.0952476040029191        ,
 0.09145451790015595       ,
 0.08795270745873258       ,
 0.08470984533277356       ,
 0.08169821634816739       ,
 0.07889392370488434       ,
 0.0762762535091703        ,
 0.07382716223144686       ,
 0.07153085984086846       ,
 0.06937346885202962       ,
 0.06734274325907759       ,
 0.06542783570352886       ,
 0.063619103363314         ,
 0.06190794526459421       ,
 0.060286665320542665      ,
 0.058748356338497856      ,
 0.057286801499240377      ,
 0.05589639017513369       ,
 0.05457204580918588       ,
 0.05330916383804037       ,
 0.05210355806684328       ,
 0.05095141421705217       ,
 0.049849249495488177      ,
 0.04879387735936359       ,
 0.04778237665453804       ,
 0.0468120645499232        ,
 0.04588047271275355       ,
 0.04498532628169078       ,
 0.04412452527773423       ,
 0.04329612810228241       ,
 0.042498336885806454      ,
 0.041729484420083215      ,
 0.04098802249920132       ,
 0.04027251148459124       ,
 0.039581610947028036      ,
 0.03891407126643319       ,
 0.03826872606273991       ,
 0.03764448538031827       ,
 0.03704032952415379       ,
 0.03645530348771687       ,
 0.035888511901506125      ,
 0.035339114446478595      ,
 0.034806321687887366      ,
 0.03428939127716624       ,
 0.03378762449407871       ,
 0.033300363085085556      ,
 0.03282698637538247       ,
 0.03236690862400697       ,
 0.031919576598513744      ,
 0.031484467351040026      ,
 0.031061086171673444      ,
 0.030648964708635734      ,
 0.030247659234172896      ,
 0.02985674904719096       ,
 0.02947583499816766       ,
 0.02910453812556917       ,
 0.02874249839581371       ,
 0.028389373534678262      ,
 0.02804483794615552       ,
 0.027708581707755735      ,
 0.027380309638601594      ,
 0.02705974043292454       ,
 0.026746605853671095      ,
 0.02644064998255439       ,
 0.026141628520002333      ,
 0.02584930813357483       ,
 0.025563465848694653      ,
 0.02528388848022924       ,
 0.02501037210089267       ,
 0.024742721543713632      ,
 0.024480749936820347      ,
 0.024224278266774747      ,
 0.023973134970060147      ,
 0.0237271555490756        ,
 0.023486182212102687      ,
 0.023250063534923416      ,
 0.023018654142580818      ]
m0c_l = [8.332225454826121			,
 1.93162089088586          ,
 1.0636469781765199        ,
 0.7298484725006776        ,
 0.5546845714972664        ,
 0.44715656055742686       ,
 0.37451790669996726       ,
 0.3220891524382046        ,
 0.28251242876936333       ,
 0.2515793236639496        ,
 0.22673806843249253       ,
 0.2063516343922387        ,
 0.18932150595089128       ,
 0.17488296202868206       ,
 0.16248718182236455       ,
 0.15173003545756927       ,
 0.14230733068818952       ,
 0.13398571678066123       ,
 0.12658319466192133       ,
 0.11995573338574107       ,
 0.11398786293187449       ,
 0.10858593396330676       ,
 0.10367319976430248       ,
 0.09918617047903461       ,
 0.09507187233750901       ,
 0.09128575871002426       ,
 0.08779010064819076       ,
 0.08455273181036263       ,
 0.08154606090671962       ,
 0.07874628714052088       ,
 0.07613277151951517       ,
 0.07368752935142463       ,
 0.07139481714259227       ,
 0.06924079447306325       ,
 0.06721324507034224       ,
 0.06530134560222466       ,
 0.06349547280868198       ,
 0.061787041767332865      ,
 0.06016836966854452       ,
 0.05863256039230497       ,
 0.05717340643178926       ,
 0.05578530505859614       ,
 0.05446318647441094       ,
 0.0532024519489357        ,
 0.05199892036486752       ,
 0.0508487819007394        ,
 0.0497485577080104        ,
 0.048695064762370344      ,
 0.04768538507161555       ,
 0.04671683866592613       ,
 0.045786959819069425      ,
 0.044893476058115445      ,
 0.04403428960498382       ,
 0.043207460899410015      ,
 0.042411193968531505      ,
 0.04164382337617427       ,
 0.04090380257861201       ,
 0.04018969349959952       ,
 0.03950015718349686       ,
 0.038833945403776896      ,
 0.03818989310107382       ,
 0.03756691157375598       ,
 0.03696398231963131       ,
 0.036380151468524136      ,
 0.03581452473493916       ,
 0.035266262835130666      ,
 0.03473457732413533       ,
 0.03421872680050818       ,
 0.03371801345106549       ,
 0.03323177989157301       ,
 0.032759406280894354      ,
 0.03230030767801968       ,
 0.031853931618508594      ,
 0.03141975589217496       ,
 0.030997286497960092      ,
 0.03058605576551098       ,
 0.03018562062236233       ,
 0.029795560997789294      ,
 0.029415478348856477      ,
 0.029044994297903616      ,
 0.028683749373514835      ,
 0.028331401842875286      ,
 0.02798762663152434       ,
 0.027652114319506132      ,
 0.0273245702102701        ,
 0.02700471346493195       ,
 0.026692276296606383      ,
 0.026387003221149268      ,
 0.026088650357764167      ,
 0.02579698477804552       ,
 0.02551178389730752       ,
 0.025232834906735845      ,
 0.02495993424233391       ,
 0.024692887087909978      ,
 0.024431506910358985      ,
 0.02417561502347048       ,
 0.023925040179870884      ,
 0.02367961818745097       ,
 0.02343919154974783       ,
 0.023203609127958002      ,
 0.022972725823079163      ]
m1c_d = [6.248833624150096			,
 1.7521779129303128        ,
 1.1273399816519256        ,
 0.8629531220507919        ,
 0.7127819766050344        ,
 0.6141987025025186        ,
 0.5436601452323672        ,
 0.4901746042340388        ,
 0.4480244099135621        ,
 0.4138102671936147        ,
 0.38539462663173196       ,
 0.3613587506898904        ,
 0.34072031642456274       ,
 0.32277561934742566       ,
 0.307006241509471         ,
 0.2930211887908553        ,
 0.2805196049587901        ,
 0.2692659537605203        ,
 0.25907302440250096       ,
 0.24979001957904315       ,
 0.24129402085975493       ,
 0.23348376377069963       ,
 0.22627501941770245       ,
 0.21959711698900136       ,
 0.21339029085123168       ,
 0.20760363029325776       ,
 0.20219347900829318       ,
 0.19712217136322546       ,
 0.1923570261803887        ,
 0.18786953808975304       ,
 0.18363472245997078       ,
 0.17963058102713927       ,
 0.1758376624863014        ,
 0.17223869931934502       ,
 0.16881830534864914       ,
 0.1655627227349464        ,
 0.16245960904088325       ,
 0.15949785711754186       ,
 0.1566674421235662        ,
 0.1539592908348007        ,
 0.15136516971104416       ,
 0.14887758846475943       ,
 0.146489716789655         ,
 0.14419531212820175       ,
 0.14198865680000158       ,
 0.13986450313955356       ,
 0.1378180253978159        ,
 0.13584477753252627       ,
 0.13394065598021707       ,
 0.1321018667887322        ,
 0.13032489649402207       ,
 0.12860648625046295       ,
 0.12694360881677713       ,
 0.12533344799771223       ,
 0.12377338028169578       ,
 0.12226095836418366       ,
 0.12079389636191355       ,
 0.1193700565031307        ,
 0.11798743712383784       ,
 0.11664416183344328       ,
 0.11533846969825122       ,
 0.114068706355687         ,
 0.11283331593518856       ,
 0.11163083371717179       ,
 0.11045987944386498       ,
 0.10931915121508837       ,
 0.10820741991646718       ,
 0.10712352411464252       ,
 0.1060663653879924        ,
 0.10503490403675489       ,
 0.10402815514645976       ,
 0.10304518496605031       ,
 0.10208510757154574       ,
 0.10114708179328316       ,
 0.10023030837537887       ,
 0.09933402735567794       ,
 0.09845751563815856       ,
 0.09760008474745695       ,
 0.09676107874656212       ,
 0.09593987230391984       ,
 0.0951358689001699        ,
 0.09434849915814311       ,
 0.09357721929188399       ,
 0.09282150965951445       ,
 0.09208087341583578       ,
 0.09135483525465773       ,
 0.09064294023389936       ,
 0.08994475267892509       ,
 0.08925985515492944       ,
 0.08858784750709506       ,
 0.08792834595972607       ,
 0.08728098227283725       ,
 0.0866454029505624        ,
 0.08602126849766943       ,
 0.08540825272201674       ,
 0.0848060420774844        ,
 0.08421433504727646       ,
 0.08363284156218792       ,
 0.0830612824534274        ,
 0.08249938893663364       ,
 0.08194690212500946       ]
m1c_l = [4.166840100337513         ,
 1.4826507624952827        ,
 0.9764816077997038        ,
 0.7516406355495622        ,
 0.6220096481505684        ,
 0.5365324264903102        ,
 0.4753028605186956        ,
 0.42885136512765404       ,
 0.3922163042744965        ,
 0.3624464042420793        ,
 0.3376899820779249        ,
 0.3167213147294151        ,
 0.2986934383237566        ,
 0.28300026001537637       ,
 0.26919533802194906       ,
 0.25694175829756855       ,
 0.24597998560904286       ,
 0.23610653728005174       ,
 0.22715941389867636       ,
 0.21900790297537293       ,
 0.21154527703395345       ,
 0.20468346687456127       ,
 0.1983491067736708        ,
 0.19248055328779803       ,
 0.18702560782458966       ,
 0.18193975380184432       ,
 0.1771847784965753        ,
 0.17272768251043527       ,
 0.16853980977435085       ,
 0.1645961478143244        ,
 0.1608747597642137        ,
 0.15735632035332534       ,
 0.15402373379170406       ,
 0.15086181752815303       ,
 0.14785703856173077       ,
 0.144997292601887         ,
 0.14227171801230556       ,
 0.13967053827612516       ,
 0.13718492807997518       ,
 0.13480689880928134       ,
 0.1325292004131424        ,
 0.1303452368007073        ,
 0.12824899274081483       ,
 0.12623497041778062       ,
 0.12429813418190484       ,
 0.12243386231609776       ,
 0.12063790473460045       ,
 0.11890634584569772       ,
 0.11723557178894319       ,
 0.11562224149896413       ,
 0.114063261064485         ,
 0.11255576094051338       ,
 0.11109707567751392       ,
 0.10968472580840369       ,
 0.10831640167098006       ,
 0.1069899488870827        ,
 0.10570335533491375       ,
 0.10445473940243666       ,
 0.10324233941376476       ,
 0.10206450407930374       ,
 0.10091968384064648       ,
 0.09980642303570611       ,
 0.09872335277674237       ,
 0.09766918447811636       ,
 0.09664270395877116       ,
 0.09564276606055265       ,
 0.09466828973571968       ,
 0.09371825354631241       ,
 0.09279169154789879       ,
 0.09188768950773632       ,
 0.09100538143456417       ,
 0.09014394638592488       ,
 0.08930260552735458       ,
 0.0884806194239926        ,
 0.08767728553706135       ,
 0.08689193591479419       ,
 0.08612393505302822       ,
 0.08537267791651346       ,
 0.08463758810410398       ,
 0.08391811614570457       ,
 0.08321373792235645       ,
 0.08252395319502782       ,
 0.08184828423834438       ,
 0.08118627456588172       ,
 0.08053748774341876       ,
 0.07990150628128978       ,
 0.07927793059971505       ,
 0.0786663780630965        ,
 0.0780664820751863        ,
 0.07747789123399342       ,
 0.07690026853867353       ,
 0.07633329064705797       ,
 0.07577664717885324       ,
 0.07523004006123062       ,
 0.07469318291490384       ,
 0.07416580047586536       ,
 0.07364762805269907       ,
 0.07313841101469415       ,
 0.07263790431039627       ,
 0.07214587201362742       ,
 0.07166208689517373       ]
m2c_d = [3.1332560183612714		,
 1.6212801482256332        ,
 1.2791152708614701        ,
 1.1098656991074707        ,
 1.0036242745011756        ,
 0.9281425265330127        ,
 0.8704508141848278        ,
 0.8242158836574924        ,
 0.7860110424194955        ,
 0.7537055008275918        ,
 0.7258987584726783        ,
 0.7016209714266518        ,
 0.6801737099740989        ,
 0.6610384634348089        ,
 0.6438207719590253        ,
 0.6282144124569029        ,
 0.6139775426762153        ,
 0.6009163109574253        ,
 0.5888732936606191        ,
 0.5777191648552849        ,
 0.5673465746877469        ,
 0.5576655796713803        ,
 0.548600179298018         ,
 0.5400856566006628        ,
 0.5320665123971776        ,
 0.5244948418146155        ,
 0.5173290471440637        ,
 0.5105328066478988        ,
 0.5040742422827462        ,
 0.49792524222246953       ,
 0.49206090537203984       ,
 0.4864590830266149        ,
 0.48109999783659035       ,
 0.4759659256106085        ,
 0.4710409276633554        ,
 0.46631062478330376       ,
 0.46176200524172983       ,
 0.45738326095428156       ,
 0.453163647138533         ,
 0.4490933614220235        ,
 0.4451634394794047        ,
 0.4413656644195788        ,
 0.437692487952496         ,
 0.4341369615046972        ,
 0.4306926758335903        ,
 0.4273537079711665        ,
 0.4241145743907796        ,
 0.42097018963978033       ,
 0.4179158296164078        ,
 0.4149470989453566        ,
 0.41205990189124914       ,
 0.40925041636514486       ,
 0.4065150706649847        ,
 0.40385052257595305       ,
 0.40125364059911184       ,
 0.39872148701245475       ,
 0.39625130258813746       ,
 0.3938404927611738        ,
 0.3914866150892683        ,
 0.38918736787638347       ,
 0.38694057981153596       ,
 0.38474420054401          ,
 0.38259629207102436       ,
 0.38049502087473236       ,
 0.3784386507230037        ,
 0.37642553606864165       ,
 0.37445411599682327       ,
 0.37252290865385157       ,
 0.3706305061288792        ,
 0.3687755697300568        ,
 0.36695682563105164       ,
 0.36517306084814066       ,
 0.36342311951850975       ,
 0.36170589945842785       ,
 0.3600203489678706        ,
 0.3583654638714867        ,
 0.35674028476543035       ,
 0.3551438944607519        ,
 0.35357541560309536       ,
 0.3520340084544689        ,
 0.3505188688274852        ,
 0.3490292261539594        ,
 0.34756434168468403       ,
 0.34612350680319215       ,
 0.3447060414500939        ,
 0.34331129264692256       ,
 0.34193863311208644       ,
 0.34058745996449963       ,
 0.3392571935043497        ,
 0.3379472760704923        ,
 0.33665717096416486       ,
 0.3353863614379997        ,
 0.3341343497439006        ,
 0.33290065623573845       ,
 0.331684818524804         ,
 0.33048639068150054       ,
 0.3293049424838003        ,
 0.3281400587059002        ,
 0.32699133844706835       ,
 0.3258583944967424        ,
 0.32474085273354          ]
m2c_l = [2.089085876004999         ,
 1.2280809877664618        ,
 0.9815356491251355        ,
 0.8529185076560001        ,
 0.7712216666671569        ,
 0.7133214292125352        ,
 0.6692826138269976        ,
 0.6340937712002654        ,
 0.6050286437674022        ,
 0.5804163079465962        ,
 0.5591799462379524        ,
 0.5405869596398276        ,
 0.5241164051726097        ,
 0.5093843747231714        ,
 0.4960996741647143        ,
 0.4840361494287113        ,
 0.47301473680741446       ,
 0.46289135150775157       ,
 0.4535484484319135        ,
 0.44488899834539053       ,
 0.43683207601711754       ,
 0.4293095692129132        ,
 0.42226368075631976       ,
 0.4156450042103274        ,
 0.4094110229445346        ,
 0.4035249248462129        ,
 0.3979546594492706        ,
 0.3926721754737819        ,
 0.3876528009824077        ,
 0.38287473982530545       ,
 0.3783186553419751        ,
 0.37396732548348205       ,
 0.3698053548036609        ,
 0.36581893299954465       ,
 0.3619956311064134        ,
 0.3583242287798505        ,
 0.3547945672129006        ,
 0.35139742324358153       ,
 0.3481244013001641        ,
 0.34496784005597214       ,
 0.34192073174010035       ,
 0.33897665193315973       ,
 0.3361296984037118        ,
 0.33337443758807483       ,
 0.3307058576127359        ,
 0.32811932696292323       ,
 0.32561055798059685       ,
 0.32317557457768387       ,
 0.3208106835663785        ,
 0.3185124491474569        ,
 0.316277670192401         ,
 0.31410335988069243       ,
 0.31198672751133977       ,
 0.3099251621365127        ,
 0.30791621787993895       ,
 0.3059576006622912        ,
 0.30404715625492834       ,
 0.3021828593254634        ,
 0.3003628036652948        ,
 0.2985851932789633        ,
 0.29684833425171686       ,
 0.2951506273503851        ,
 0.2934905612762433        ,
 0.291866706498031         ,
 0.29027770960574756       ,
 0.2887222881346408        ,
 0.2871992258168082        ,
 0.285707368210851         ,
 0.28424561868974857       ,
 0.28281293473677377       ,
 0.2814083245324079        ,
 0.28003084380068943       ,
 0.2786795928922699        ,
 0.27735371408677184       ,
 0.2760523890891293        ,
 0.27477483671135705       ,
 0.2735203107152739        ,
 0.2722880978104033        ,
 0.27107751579010275       ,
 0.26988791179482063       ,
 0.26871866069505285       ,
 0.26756916357982213       ,
 0.26643884634794507       ,
 0.26532715838874665       ,
 0.2642335713496756        ,
 0.2631575779819128        ,
 0.26209869105823375       ,
 0.26105644235961445       ,
 0.26003038172232823       ,
 0.25902007614511574       ,
 0.258025108948347         ,
 0.2570450789843573        ,
 0.2560795998939022        ,
 0.2551282994055802        ,
 0.2541908186765448        ,
 0.2532668116694653        ,
 0.25235594456610233       ,
 0.25145789521236145       ,
 0.2505723525947579        ,
 0.24969901634512898       ,
 0.2488375962721133        ]
m3c_d = [1.5750888642708603		,
 1.6192106888156934        ,
 1.5759925096693443        ,
 1.5532020309437677        ,
 1.5388523373681557        ,
 1.5277266313180191        ,
 1.5181530202762044        ,
 1.5096542978550058        ,
 1.5020706578128502        ,
 1.495303634208761         ,
 1.4892637838130476        ,
 1.483863917744782         ,
 1.479022027998339         ,
 1.4746640370766888        ,
 1.4707249266481417        ,
 1.46714864815107          ,
 1.4638873816552018        ,
 1.4609005365527947        ,
 1.4581537148887551        ,
 1.4556177477579497        ,
 1.4532678464121571        ,
 1.4510828782673748        ,
 1.4490447599032743        ,
 1.4471379533853788        ,
 1.4453490507244215        ,
 1.4436664314263852        ,
 1.4420799806839155        ,
 1.4405808567845464        ,
 1.439161298932577         ,
 1.437814467852187         ,
 1.4365343131375847        ,
 1.4353154625125435        ,
 1.4341531289061997        ,
 1.433043032300892         ,
 1.4319813336234404        ,
 1.4309645786887588        ,
 1.4299896504401552        ,
 1.4290537281088593        ,
 1.4281542521875097        ,
 1.4272888942376853        ,
 1.426455530827429         ,
 1.4256522209103883        ,
 1.4248771861643246        ,
 1.4241287938311114        ,
 1.423405541696712         ,
 1.4227060449184967        ,
 1.4220290244198481        ,
 1.4213732966630657        ,
 1.4207377645907284        ,
 1.42012140959902          ,
 1.4195232843998473        ,
 1.418942506659135         ,
 1.4183782533204756        ,
 1.4178297555183892        ,
 1.4172962940234828        ,
 1.4167771951433443        ,
 1.4162718270353718        ,
 1.4157795963791617        ,
 1.4152999453681026        ,
 1.4148323489880656        ,
 1.4143763125454516        ,
 1.4139313694252005        ,
 1.413497079047078         ,
 1.4130730250049421        ,
 1.4126588133671878        ,
 1.412254071122244         ,
 1.4118584447566622        ,
 1.4114715989489823        ,
 1.411093215372636         ,
 1.4107229915931319        ,
 1.410360640053854         ,
 1.4100058871405579        ,
 1.4096584723173455        ,
 1.4093181473291232        ,
 1.408984675462075         ,
 1.4086578308600495        ,
 1.408337397889206         ,
 1.4080231705488464        ,
 1.407714951923515         ,
 1.4074125536728554        ,
 1.407115795557182         ,
 1.4068245049941026        ,
 1.4065385166457474        ,
 1.406257672032353         ,
 1.405981819171434         ,
 1.405710812239956         ,
 1.4054445112577318        ,
 1.4051827817910796        ,
 1.40492549467412          ,
 1.4046725257478112        ,
 1.4044237556140813        ,
 1.4041790694050376        ,
 1.4039383565656183        ,
 1.4037015106487731        ,
 1.4034684291227768        ,
 1.4032390131890313        ,
 1.4030131676106377        ,
 1.4027908005500782        ,
 1.402571823416122         ,
 1.4023561507189772        ,
 1.40214369993317          ]
m3c_l = [1.0500405003736644        ,
 1.092225581806414         ,
 1.0681265723349596        ,
 1.0510893450538217        ,
 1.0400950261693036        ,
 1.0324024418253255        ,
 1.0263911383449074        ,
 1.0212845877865289        ,
 1.016724424819522         ,
 1.0125518291236304        ,
 1.0086969814408877        ,
 1.0051253548497827        ,
 1.0018147493640577        ,
 0.9987465991676018        ,
 0.9959031894979749        ,
 0.9932669133497884        ,
 0.9908205408200351        ,
 0.9885475651892733        ,
 0.9864324437416165        ,
 0.984460782551753         ,
 0.9826194040985579        ,
 0.9808963434263313        ,
 0.9792807997730134        ,
 0.9777630607299215        ,
 0.976334414262624         ,
 0.9749870570215327        ,
 0.9737140145231055        ,
 0.9725090459802991        ,
 0.9713665500821644        ,
 0.9702815015813013        ,
 0.9692493853035308        ,
 0.968266138594314         ,
 0.967328099694844         ,
 0.966431962122455         ,
 0.9655747346683179        ,
 0.9647537059291313        ,
 0.9639664135561042        ,
 0.9632106169275202        ,
 0.9624842734845905        ,
 0.961785517441488         ,
 0.9611126414255613        ,
 0.9604640801111031        ,
 0.9598383958615223        ,
 0.9592342660304649        ,
 0.9586504717040552        ,
 0.958085887643685         ,
 0.9575394734844157        ,
 0.9570102657785893        ,
 0.9564973710156404        ,
 0.9559999591913406        ,
 0.9555172583818288        ,
 0.9550485494920963        ,
 0.9545931618559091        ,
 0.9541504691465444        ,
 0.9537198858789879        ,
 0.9533008640769829        ,
 0.9528928905201762        ,
 0.9524954831789861        ,
 0.9521081892090137        ,
 0.9517305827994855        ,
 0.9513622630858798        ,
 0.9510028522428637        ,
 0.9506519938594421        ,
 0.9503093514024554        ,
 0.9499746068123022        ,
 0.9496474592234808        ,
 0.949327623771367         ,
 0.949014830496869         ,
 0.9487088233642452        ,
 0.9484093593429167        ,
 0.9481162075649261        ,
 0.9478291485467715        ,
 0.9475479734726385        ,
 0.9472724835291619        ,
 0.9470024892927588        ,
 0.9467378101626629        ,
 0.9464782738280195        ,
 0.9462237157817386        ,
 0.9459739788670791        ,
 0.9457289128552676        ,
 0.9454883740531584        ,
 0.9452522249376977        ,
 0.9450203338148324        ,
 0.944792574500274         ,
 0.9445688260234317        ,
 0.9443489723499625        ,
 0.9441329021221834        ,
 0.9439205084164394        ,
 0.9437116885151843        ,
 0.9435063436940455        ,
 0.9433043790215738        ,
 0.9431057031715919        ,
 0.942910228246689         ,
 0.9427178696123649        ,
 0.9425285457411087        ,
 0.9423421780653065        ,
 0.9421586908393301        ,
 0.9419780110091553        ,
 0.941800068089113         ,
 0.941624794044461         ,
 0.9414521231824605        ]


diff_m3=[]
zip_object = zip(m3c_d, m3c_l)
for m3c_d_i, m3c_l_i in zip_object:
    diff_m3.append(m3c_d_i-m3c_l_i)
sum_m3 = [sum(x) for x in zip(m3c_d, m3c_l)]

eec = [m/n for m, n in zip(diff_m3,sum_m3)]


pp.figure(9)
#Change the figure size
pp.figure(figsize=[16, 12])
pp.subplot(2,2,1)
pp.plot(r.t,r.y[0,:]/initial_m_d[0],'.r',r.t,np.array(m0c_d)/initial_m_d[0],'-b')
pp.xlabel('time',{"fontsize":16})
pp.ylabel('m0(t)/m0(0)',{"fontsize":16})
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.title('(a) Evolution of zeroth moment',fontsize=15)
pp.subplot(2,2,2)
pp.plot(r.t,r.y[1,:]/initial_m_d[1],'.r',r.t,np.array(m1c_d)/initial_m_d[1],'-b')
pp.xlabel('time',{"fontsize":16})
pp.ylabel('m1(t)/m1(0)',{"fontsize":16})
pp.title('(b) Evolution of first moment',fontsize=15)
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.subplot(2,2,3)
pp.plot(r.t,r.y[2,:]/initial_m_d[2],'.r',r.t,np.array(m2c_d)/initial_m_d[2],'-b')
pp.xlabel('time',{"fontsize":16})
pp.ylabel('m2(t)/m2(0)',{"fontsize":16})
pp.title('(c) Evolution of second moment',fontsize=15)
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.subplot(2,2,4)
pp.plot(r.t,r.y[3,:]/initial_m_d[3],'.r',r.t,np.array(m3c_d)/initial_m_d[3],'-b')
pp.ylim([0.6, 1.4])
pp.xlabel('time',{"fontsize":16})
pp.ylabel('m3(t)/m3(0)',{"fontsize":16})
pp.title('(d) Evolution of third moment',fontsize=15)
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='lower right',borderaxespad=0.1, fontsize=15)
pp.suptitle('Enantiomer D', x=0.5, y=0.95, fontsize=17, fontweight='700',)

pp.figure(10)
#Change the figure size
pp.figure(figsize=[16, 12])
pp.subplot(2,2,1)
pp.plot(r.t,r.y[4,:]/initial_m_l[0],'.r',r.t,np.array(m0c_l)/initial_m_l[0],'-b')
pp.xlabel('time',{"fontsize":16})
pp.ylabel('m0(t)/m0(0)',{"fontsize":16})
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.title('(a) Evolution of zeroth moment',fontsize=15)
pp.subplot(2,2,2)
pp.plot(r.t,r.y[5,:]/initial_m_l[1],'.r',r.t,np.array(m1c_l)/initial_m_l[1],'-b')
pp.xlabel('time',{"fontsize":16})
pp.ylabel('m1(t)/m1(0)',{"fontsize":16})
pp.title('(b) Evolution of first moment',fontsize=15)
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.subplot(2,2,3)
pp.plot(r.t,r.y[6,:]/initial_m_l[2],'.r',r.t,np.array(m2c_l)/initial_m_l[2],'-b')
pp.xlabel('time',{"fontsize":16})
pp.ylabel('m2(t)/m2(0)',{"fontsize":16})
pp.title('(c) Evolution of second moment',fontsize=15)
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.subplot(2,2,4)
pp.plot(r.t,r.y[7,:]/initial_m_l[3],'.r',r.t,np.array(m3c_l)/initial_m_l[3],'-b')
pp.ylim([0.6, 1.4])
pp.xlabel('time',{"fontsize":16})
pp.ylabel('m3(t)/m3(0)',{"fontsize":16})
pp.title('(d) Evolution of third moment',fontsize=15)
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='lower right',borderaxespad=0.1, fontsize=15)
pp.suptitle('Enantiomer L', x=0.5, y=0.95, fontsize=17, fontweight='700')

'''Σχετικό Σφάλμα χρονικής εξέλιξης ροπών'''
err0_d=[]
for i in range(len(r.y[0,:])): 
    err = np.abs(r.y[0,i]/initial_m_d[0]-m0c_d[i]/initial_m_d[0])/(m0c_d[i]/initial_m_d[0])*100
    err0_d.append(err)

err1_d=[]
for i in range(len(r.y[1,:])): 
    err = np.abs(r.y[1,i]/initial_m_d[1]-m1c_d[i]/initial_m_d[1])/(m1c_d[i]/initial_m_d[1])*100
    err1_d.append(err)
    
err2_d=[]
for i in range(len(r.y[2,:])): 
    err = np.abs(r.y[2,i]/initial_m_d[2]-m2c_d[i]/initial_m_d[2])/(m2c_d[i]/initial_m_d[2])*100
    err2_d.append(err)

err3_d=[]
for i in range(len(r.y[3,:])): 
    err = np.abs(r.y[3,i]/initial_m_d[3]-m3c_d[i]/initial_m_d[3])/(m3c_d[i]/initial_m_d[3])*100
    err3_d.append(err)
    
pp.figure(11)
#Change the figure size
pp.figure(figsize=[16, 12])
pp.subplot(2,2,1)
pp.plot(r.t,err0_d)
pp.xlabel('time',{"fontsize":16})
pp.ylabel('percentage error',{"fontsize":16})
pp.title('(a) Zeroth moment',fontsize=15)
pp.subplot(2,2,2)
pp.plot(r.t,err1_d)
pp.xlabel('time',{"fontsize":16})
pp.ylabel('percentage error',{"fontsize":16})
pp.title('(b) First moment',fontsize=15)
pp.subplot(2,2,3)
pp.plot(r.t,err2_d)
pp.xlabel('time',{"fontsize":16})
pp.ylabel('percentage error',{"fontsize":16})
pp.title('(c) Second moment',fontsize=15)
pp.subplot(2,2,4)
pp.plot(r.t,err3_d)
pp.xlabel('time',{"fontsize":16})
pp.ylabel('percentage error',{"fontsize":16})
pp.title('(d) Third moment',fontsize=15)
pp.suptitle('Enantiomer D', x=0.5, y=0.95, fontsize=17, fontweight='700',)


err0_l=[]
for i in range(len(r.y[4,:])): 
    err = np.abs(r.y[4,i]/initial_m_l[0]-m0c_l[i]/initial_m_l[0])/(m0c_l[i]/initial_m_l[0])*100
    err0_l.append(err)

err1_l=[]
for i in range(len(r.y[5,:])): 
    err = np.abs(r.y[5,i]/initial_m_l[1]-m1c_l[i]/initial_m_l[1])/(m1c_l[i]/initial_m_l[1])*100
    err1_l.append(err)
    
err2_l=[]
for i in range(len(r.y[6,:])): 
    err = np.abs(r.y[6,i]/initial_m_l[2]-m2c_l[i]/initial_m_l[2])/(m2c_l[i]/initial_m_l[2])*100
    err2_l.append(err)

err3_l=[]
for i in range(len(r.y[7,:])): 
    err = np.abs(r.y[7,i]/initial_m_l[3]-m3c_l[i]/initial_m_l[3])/(m3c_l[i]/initial_m_l[3])*100
    err3_l.append(err)
    
pp.figure(12)
#Change the figure size
pp.figure(figsize=[16, 12])
pp.subplot(2,2,1)
pp.plot(r.t,err0_l)
pp.xlabel('time',{"fontsize":16})
pp.ylabel('percentage error',{"fontsize":16})
pp.title('(a) Zeroth moment',fontsize=15)
pp.subplot(2,2,2)
pp.plot(r.t,err1_l)
pp.xlabel('time',{"fontsize":16})
pp.ylabel('percentage error',{"fontsize":16})
pp.title('(b) First moment',fontsize=15)
pp.subplot(2,2,3)
pp.plot(r.t,err2_l)
pp.xlabel('time',{"fontsize":16})
pp.ylabel('percentage error',{"fontsize":16})
pp.title('(c) Second moment',fontsize=15)
pp.subplot(2,2,4)
pp.plot(r.t,err3_l)
pp.xlabel('time',{"fontsize":16})
pp.ylabel('percentage error',{"fontsize":16})
pp.title('(d) Third moment',fontsize=15)
pp.suptitle('Enantiomer L', x=0.5, y=0.95, fontsize=17, fontweight='700',)



'''Κατανομές maxent και comsol για την τελευταία χρονική στιγμή'''
Lmin=0
Lmax=8
bnds=[Lmin,Lmax]

pp.figure(13)
pp.figure(figsize=[10, 8])
mulast_d=[r.y[0,-1],r.y[1,-1],r.y[2,-1],r.y[3,-1]]
sollast_d, lambdaslast=maxent_reconstruct_c0_1(mu=mulast_d,bnds=bnds)

mulast_l=[r.y[4,-1],r.y[5,-1],r.y[6,-1],r.y[7,-1]]
sollast_l, lambdaslast=maxent_reconstruct_c0_2(mu=mulast_l,bnds=bnds)

'''reconstructed distribution from comsol moments at last time step'''
mu_comsol_d = [m0c_d[-1],m1c_d[-1],m2c_d[-1],m3c_d[-1]]
mu_comsol_l = [m0c_l[-1],m1c_l[-1],m2c_l[-1],m3c_l[-1]]

sol_comsol_d, lambdas_comsol_d = maxent_reconstruct_c0_1(mu=mu_comsol_d,bnds=bnds)
sol_comsol_l, lambdas_comsol_l = maxent_reconstruct_c0_2(mu=mu_comsol_l,bnds=bnds)

L=np.linspace(0,8)
pp.plot(L,sollast_d(L),'-b,', L,sollast_l(L),'-g',L,sol_comsol_d(L),'-r,', L,sol_comsol_l(L),'-y')
pp.title('t = 20 ')
pp.xlabel('characteristic length',{"fontsize":16})
pp.ylabel('size distribution',{"fontsize":16})
pp.legend(('maxent f (D)','maxent f (L)', 'Comsol f (D)','Comsol f (L)'),loc=0)
