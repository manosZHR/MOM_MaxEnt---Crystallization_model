# -*- coding: utf-8 -*-
"""
Created on Tue May 24 00:09:28 2022

@author: Manos
"""

import time 
import numpy as np
from scipy.integrate import quad,solve_ivp
from numpy import sqrt, pi
import pylab as pp
from pymaxent import maxent_reconstruct_c0_1,maxent_reconstruct_c1_1,temp1,maxent_reconstruct_c0_2,maxent_reconstruct_c1_2,temp2,moments_c
from plyer import notification

start = time.time()


'''Constants'''
a0 = 3.5e-4
kv = pi/6 
dens = 1300
q0 = 400
q1 = 2500
kr0 = 1e11
Er = 75000

lmeand0 = 0.5
lmeanl0 = 0.5
σd0 = 0.025
σl0 = 0.025

m3d0 = 0.062806
ratio = 1.5
m3l0 = m3d0/ratio

'''Αδιαστατοποίηση'''
Lr = 100e-6 
tr = 3600
Tr = 273
scale = 1e4

Eg = 12000
Ed = 12000
R = 8.314

T = 308

kb = 0.0001
kg = 1e-4
kd = 2e-4

Kg = tr/Lr * kg*np.exp(-Eg/(R*T))
Kd = tr/Lr * kd*np.exp(-Ed/(R*T))
Kbg = kb*tr

tol1 = 1e-3 #absolute error
tol2 = 1e-2 #relative error


'''Αρχικοποίση των μεταβλητών'''
tspan=(0, 20)
step = 1
resolution = int(tspan[1]/step)
teval = np.linspace(tspan[0],tspan[1],resolution+1)

def f0_d(λ):
    return ( m3d0*lmeand0*(lmeand0**2+3*σd0**2)/(sqrt(2*pi*σd0)) * np.exp(-(λ-lmeand0)**2/(2*σd0**2)) )*scale 
def f0_l(λ):
    return ( m3l0*lmeanl0*(lmeanl0**2+3*σl0**2)/(sqrt(2*pi*σl0)) * np.exp(-(λ-lmeanl0)**2/(2*σl0**2)) )*scale 

initial_m_d = moments_c(f0_d, k=4, bnds=[0, np.inf])
initial_m_l = moments_c(f0_l, k=4, bnds=[0, np.inf])

Sd0 = 1
Sl0 = 1
initial_values = [*initial_m_d, *initial_m_l, Sd0, Sl0]


ee0 = ( initial_m_d[3] - initial_m_l[3] ) / ( initial_m_d[3] + initial_m_l[3] )


def cinf_d(T): return( q0*np.exp(-q1/T) )
def cinf_l(T): return( q0*np.exp(-q1/T) )

def γ_d(T): return( cinf_d(T)/(Lr**3*kv*dens) )
def γ_l(T): return( cinf_l(T)/(Lr**3*kv*dens) )


'''Growth Term'''
def G_d(Sd,T,L):
    if L<1e-3: return(0)
    else:
        jd =  Sd-1-a0/(L*Lr*T)
        if jd>0: 
            result = Kg * jd 
            return result
        else: 
            result = Kd * jd 
            return result

def G_l(Sl,T,L):
    if L<1e-3: return(0)
    else:
        jl =  Sl-1-a0/(L*Lr*T)
        if jl>0: 
            result = Kg * jl 
            return result
        else: 
            result = Kd * jl 
            return result
    
'''Daughter size distribution'''
q = 0
def g(L,λ): return( 3*L**2 * (2*q+1) * ( (2/(λ**3))**(2*q+1) ) * (L**3-(λ**3)/2)**(2*q) )

'''Breakage kernel'''
def a(l):
    return l**3

'''Agglomeration kernel'''
b0=1
def b(L,l):
    return b0

'''Racemization rate'''
def Rd(Sl,Sd,T):
    return( tr*kr0*np.exp(-Er/(R*T))*(Sl - Sd) )
def Rl(Sd,Sl,T):
    return( tr*kr0*np.exp(-Er/(R*T))*(Sd - Sl) )

def moments(t,y):
    m0_d=y[0]
    m1_d=y[1]
    m2_d=y[2]
    m3_d=y[3]
    m0_l=y[4]
    m1_l=y[5]
    m2_l=y[6]
    m3_l=y[7]
    Sd=y[8]
    Sl=y[9]

    print("\033[1;31m" + '''current time is''',t,'''s/''',tspan[1],'''s''')
    
    eet1 = (m3_d-m3_l)/(m3_d+m3_l)
    print('\033[32m'+'''enantiomeric excess is''',eet1)
    print('\033[39m')
    
    
    Lmean_d = np.abs(m1_d/m0_d)
    σd = np.sqrt( np.abs(m2_d-2*Lmean_d*m1_d+Lmean_d**2*m0_d)/m0_d )
    Lmean_l=m1_l/m0_l
    σl=np.sqrt( np.abs(m2_l-2*Lmean_l*m1_l+Lmean_l**2*m0_l)/m0_l )
    
    Lmin_d = max(0.25,Lmean_d - 6*σd)
    Lmax_d = min(2, Lmean_d + 6*σd)
    Lmin_l = max(0.25,Lmean_l - 6*σl)
    Lmax_l = min(2, Lmean_l + 6*σl)

    bnds_d=[Lmin_d,Lmax_d] 
    sol_d, lambdas_d= maxent_reconstruct_c1_1(mu=y[0:4] ,bnds=bnds_d)
    bnds_l=[Lmin_l,Lmax_l]
    sol_l, lambdas_l= maxent_reconstruct_c1_2(mu=y[4:8] ,bnds=bnds_l)
    
    
    '''Growth functions'''
    def h_d(l,k):
        return l**k*sol_d(l)*G_d(Sd,T,l)
    def h_l(l,k):
        return l**k*sol_l(l)*G_l(Sl,T,l)
    
    '''Breakage functions'''
    def Bd(L):
        def vd(l): return a(l)*g(L,l)*sol_d(l)
        result = quad(vd,L,bnds_d[1],epsabs=tol1,epsrel=tol2)[0]
        return result
    
    def Bl(L):
        def vl(l): return a(l)*g(L,l)*sol_l(l)
        result = quad(vl,L,bnds_l[1],epsabs=tol1,epsrel=tol2)[0]
        return result
    
    '''Agglomeration functions'''
    def Ad(L):
        def h1(l):
            u = (L**3-l**3)**(1/3)
            if  u<1e-3: temp = 0
            else: temp = b(u,l)/u**2*sol_d(u)*sol_d(l)
            return temp
        result = quad(h1,bnds_d[0],L,epsabs=tol1,epsrel=tol2)[0]
        return result
    def Al(L):
        def h2(l):
            u = (L**3-l**3)**(1/3)
            if  u<1e-3: temp = 0
            else: temp = b(u,l)/u**2*sol_l(u)*sol_l(l)
            return temp
        result = quad(h2,bnds_l[0],L,epsabs=tol1,epsrel=tol2)[0]
        return result
    
    def cd(L):
        if L<1e-3: return 0
        else:
            def h3(l): return b(L,l)*sol_d(l)
            temp = quad(h3,bnds_d[0],bnds_d[1],epsabs=tol1,epsrel=tol2)[0]
        return temp
    def cl(L):
        if L<1e-3: return 0
        else:
            def h4(l): return b(L,l)*sol_l(l)
            temp = quad(h4,bnds_l[0],bnds_l[1],epsabs=tol1,epsrel=tol2)[0]
        return temp
    
    
    def momd(L,Sd,T,k):
        return L**k * ( k*L**(-1)*G_d(Sd,T,L)*sol_d(L) + Kbg*(Bd(L)-a(L)*sol_d(L)) + L**2/2*Ad(L) - sol_d(L)*cd(L) )
    
    def moml(L,SL,T,k):
        return L**k * ( k*L**(-1)*G_l(Sl,T,L)*sol_l(L) + Kbg*(Bl(L)-a(L)*sol_l(L)) + L**2/2*Al(L) - sol_l(L)*cl(L) )
    
    k=0
    dm0dt_d = quad(momd,bnds_d[0],bnds_d[1],epsabs=tol1,epsrel=tol2,args=(Sd,T,k))[0] - ( h_d(bnds_d[1],k) - h_d(bnds_d[0],k) )
    dm0dt_l = quad(moml,bnds_l[0],bnds_l[1],epsabs=tol1,epsrel=tol2,args=(Sd,T,k))[0] - ( h_l(bnds_l[1],k) - h_l(bnds_l[0],k) )
    k=1
    dm1dt_d = quad(momd,bnds_d[0],bnds_d[1],epsabs=tol1,epsrel=tol2,args=(Sd,T,k))[0] - ( h_d(bnds_d[1],k) - h_d(bnds_d[0],k) )
    dm1dt_l = quad(moml,bnds_l[0],bnds_l[1],epsabs=tol1,epsrel=tol2,args=(Sd,T,k))[0] - ( h_l(bnds_l[1],k) - h_l(bnds_l[0],k) )
    k=2
    dm2dt_d = quad(momd,bnds_d[0],bnds_d[1],epsabs=tol1,epsrel=tol2,args=(Sd,T,k))[0] - ( h_d(bnds_d[1],k) - h_d(bnds_d[0],k) )
    dm2dt_l = quad(moml,bnds_l[0],bnds_l[1],epsabs=tol1,epsrel=tol2,args=(Sd,T,k))[0] - ( h_l(bnds_l[1],k) - h_l(bnds_l[0],k) )
    k=3
    dm3dt_d = quad(momd,bnds_d[0],bnds_d[1],epsabs=tol1,epsrel=tol2,args=(Sd,T,k))[0] - ( h_d(bnds_d[1],k) - h_d(bnds_d[0],k) )
    dm3dt_l = quad(moml,bnds_l[0],bnds_l[1],epsabs=tol1,epsrel=tol2,args=(Sd,T,k))[0] - ( h_l(bnds_l[1],k) - h_l(bnds_l[0],k) )
    
    dSddt = -1/(scale*Lr**3*γ_d(T))*dm3dt_d + Rd(Sd,Sl,T)
    dSldt = -1/(scale*Lr**3*γ_l(T))*dm3dt_l + Rl(Sd,Sl,T)

    print('[Lmin_d,Lmax_d] = ',[Lmin_d,Lmax_d])
    print('[Lmin_l,Lmax_l] = ',[Lmin_l,Lmax_l])
    print('dmkdt = \n',[dm0dt_d,dm0dt_l], '\n', [dm1dt_d,dm1dt_l], '\n', [dm2dt_d,dm2dt_l], '\n', [dm3dt_d,dm3dt_l])
        
    return(dm0dt_d,dm1dt_d,dm2dt_d,dm3dt_d,dm0dt_l,dm1dt_l,dm2dt_l,dm3dt_l,dSddt,dSldt)


r=solve_ivp(moments ,tspan, initial_values, method='BDF',t_eval=teval, jac=None, rtol=1e-2)




'''Γράφημα εξέλιξης των ροπών'''
pp.figure(0)
pp.plot(r.t,r.y[0,:],'-b',r.t,r.y[4,:],'-g')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('m0(t)',{"fontsize":16})
pp.legend(('D','L'),loc=0)
pp.title('Evolution of zeroth moment')
pp.show()

pp.figure(1)
pp.plot(r.t,r.y[1,:],'-b',r.t,r.y[5,:],'-g')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('m1(t)',{"fontsize":16})
pp.legend(('D','L'),loc=0)
pp.title('Evolution of first moment')
pp.show()

pp.figure(2)
pp.plot(r.t,r.y[2,:],'-b',r.t,r.y[6,:],'-g')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('m2(t)',{"fontsize":16})
pp.legend(('D','L'),loc=0)
pp.title('Evolution of second moment')
pp.show()

pp.figure(3)
pp.plot(r.t,r.y[3,:],'-b',r.t,r.y[7,:],'-g')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('m3(t)',{"fontsize":16})
pp.legend(('D','L'),loc=0)
pp.title('Evolution of third moment')
pp.show()

'''Supersaturation'''
pp.figure(4)
pp.plot(r.t,r.y[8,:],'-')
pp.plot(r.t,r.y[9,:],'-')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Supersaturations',{"fontsize":16})
pp.legend(('Sd','Sl'),loc=0)
pp.show()

'''Enantiomeric Excess'''
eet = (r.y[3,:] - r.y[7,:])/(r.y[3,:] + r.y[7,:])
pp.figure(5)
pp.plot(r.t,eet)
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Enantiomeric Excess',{"fontsize":16})
pp.show()

'''t=20'''
Lmean_d = np.abs(r.y[1,-1]/r.y[0,-1])
σd = np.sqrt( np.abs(r.y[2,-1]-2*Lmean_d*r.y[1,-1]+Lmean_d**2*r.y[0,-1])/r.y[0,-1] )
Lmin_d = Lmean_d - 4*σd
Lmax_d = Lmean_d + 4*σd
bnds_d = [Lmin_d,Lmax_d]

Lmean_l = np.abs(r.y[5,-1]/r.y[4,-1])
σl = np.sqrt( np.abs(r.y[6,-1]-2*Lmean_d*r.y[5,-1]+Lmean_d**2*r.y[4,-1])/r.y[4,-1] )
Lmin_l = Lmean_l - 4*σl
Lmax_l = Lmean_l + 4*σl
bnds_l = [Lmin_l,Lmax_l]

pp.figure(8)
mulast_d=[r.y[0,-1],r.y[1,-1],r.y[2,-1],r.y[3,-1]]
sollast_d, lambdaslast=maxent_reconstruct_c0_1(mu=mulast_d,bnds=bnds_d)

mulast_l=[r.y[4,-1],r.y[5,-1],r.y[6,-1],r.y[7,-1]]
sollast_l, lambdaslast=maxent_reconstruct_c0_2(mu=mulast_l,bnds=bnds_l)

L=np.linspace(0,2)
pp.plot(L,sollast_d(L),'-b,', L,sollast_l(L),'-g')
pp.title('t = 20')
pp.xlabel('L (μm)',{"fontsize":16})
pp.ylabel('n #/mLμL',{"fontsize":16})
pp.legend(('python fd','python fl'),loc=0)



end=time.time()
print('''total time is ''', (end-start)/60, '''min''')

'''End of script notification'''

message= 'Script has finished running'
notification.notify(message= message,
                    app_icon = None,
                    timeout= 10,
                    toast=False)


'''Σύγκριση με δεδομένα από μοντέλο Comsol'''

m0c_d = [12.506451285765701		,
 13.164486353514372        ,
 13.087169595811266        ,
 12.267431545761902        ,
 11.097816493065755        ,
 10.090550163791198        ,
 9.335206569010671         ,
 8.621462601636248         ,
 7.948155621802741         ,
 7.36928674804591          ,
 6.900879673542189         ,
 6.518118100687704         ,
 6.2009501260108           ,
 5.948868016011658         ,
 5.748383020147941         ,
 5.590045931082063         ,
 5.467121503483265         ,
 5.370020763813182         ,
 5.293373279100775         ,
 5.234320101704027         ,
 5.188192670503839         ,
 5.151584341600793         ,
 5.123811591749336         ,
 5.101841594605782         ,
 5.083776435954273         ,
 5.069935020867273         ,
 5.0602033491510605        ,
 5.0528861851931115        ,
 5.046696889555733         ,
 5.04137900108048          ,
 5.03711049221904          ,
 5.033958948118121         ,
 5.031717916445499         ,
 5.030102965114303         ,
 5.028892208266171         ,
 5.027948091003508         ,
 5.0271914436211125        ,
 5.026575804929531         ,
 5.0260717102951045        ,
 5.025658654069744         ,
 5.025321278544454         ,
 5.025046892187994         ,
 5.024824644838895         ,
 5.02464520821794          ,
 5.024500529054258         ,
 5.024383950734846         ,
 5.024290005423032         ,
 5.024214253569069         ,
 5.0241531351785085        ,
 5.02410378955499          ,
 5.024063917796959         ,
 5.024031698762059         ,
 5.024005659131414         ,
 5.0239846138155775        ,
 5.0239676096660055        ,
 5.023953866739143         ,
 5.023942761161345         ,
 5.023933788082893         ,
 5.023926538328761         ,
 5.023920681795473         ,
 5.023915950633988         ,
 5.023912127461048         ,
 5.023909038690034         ,
 5.023906543114518         ,
 5.023904526821995         ,
 5.023902898104495         ,
 5.023901581948243         ,
 5.023900518412121         ,
 5.0238996590493565        ,
 5.023898964639287         ,
 5.02389840356708          ,
 5.023897950193284         ,
 5.023897583715112         ,
 5.023897287522633         ,
 5.023897048103905         ,
 5.0238968545581635        ,
 5.023896698108694         ,
 5.023896571575959         ,
 5.023896469222774         ,
 5.023896386412199         ,
 5.023896319390045         ,
 5.023896265130347         ,
 5.023896221179129         ,
 5.023896185545175         ,
 5.0238961566386475        ,
 5.023896133166334         ,
 5.023896114084922         ,
 5.023896098554226         ,
 5.023896085887135         ,
 5.023896075534581         ,
 5.023896067052518         ,
 5.023896060081804         ,
 5.023896054332764         ,
 5.0238960495703395        ,
 5.023896045604108         ,
 5.023896042281891         ,
 5.023896039479819         ,
 5.02389603709806          ,
 5.023896035056195         ,
 5.0238960332884055        ,
 5.023896031742208         ]
m0c_l = [8.337634272729023         ,
 8.769944788524358         ,
 8.709258624077926         ,
 8.136194972031864         ,
 7.335472425329308         ,
 6.656511843366305         ,
 6.14873455802398          ,
 5.668423940195584         ,
 5.21862466728858          ,
 4.834524120789272         ,
 4.523953104045368         ,
 4.270451255882523         ,
 4.060470115563683         ,
 3.8938796964936695        ,
 3.761612149076814         ,
 3.657198967162607         ,
 3.5762374920560283        ,
 3.5122993078881444        ,
 3.4619026551497454        ,
 3.4230515715358965        ,
 3.3927621835314095        ,
 3.3687164258545987        ,
 3.350476634537485         ,
 3.3360699271785856        ,
 3.3242243355288807        ,
 3.3151332479679514        ,
 3.3087416368384877        ,
 3.3039468638045935        ,
 3.299896544655171         ,
 3.2964149667124616        ,
 3.293617014180836         ,
 3.291549601816968         ,
 3.2900797270511997        ,
 3.2890212486706054        ,
 3.288228370189975         ,
 3.287610521550172         ,
 3.2871155524122946        ,
 3.28671290409988          ,
 3.2863832313742622        ,
 3.286113095339803         ,
 3.285892447878583         ,
 3.2857129916436016        ,
 3.28556763484074          ,
 3.285450279761874         ,
 3.2853556602563447        ,
 3.2852794225722084        ,
 3.2852179896846017        ,
 3.285168456870902         ,
 3.2851284949957793        ,
 3.28509623248486          ,
 3.2850701654070407        ,
 3.285049102561948         ,
 3.285032080281389         ,
 3.2850183235126833        ,
 3.2850072089614804        ,
 3.2849982265879043        ,
 3.284990968455971         ,
 3.284985104459699         ,
 3.2849803670517277        ,
 3.284976540407007         ,
 3.2849734494033904        ,
 3.284970951915676         ,
 3.2849689344632176        ,
 3.284967304730471         ,
 3.284965988250436         ,
 3.2849649250765096        ,
 3.284964066172567         ,
 3.284963372359551         ,
 3.284962811971557         ,
 3.2849623593735315        ,
 3.2849619939034356        ,
 3.2849616988046844        ,
 3.284961460481984         ,
 3.2849612680811955        ,
 3.2849611127724043        ,
 3.284960987432538         ,
 3.2849608863268727        ,
 3.2849608047642445        ,
 3.2849607389962956        ,
 3.2849606859934135        ,
 3.2849606433029974        ,
 3.2849606089482073        ,
 3.2849605813258984        ,
 3.284960559135426         ,
 3.284960541338359         ,
 3.2849605270899143        ,
 3.2849605157086255        ,
 3.2849605066458905        ,
 3.2849604994528616        ,
 3.2849604937709262        ,
 3.2849604893102384        ,
 3.284960485836153         ,
 3.284960483159596         ,
 3.284960481127144         ,
 3.2849604796143117        ,
 3.284960478521814         ,
 3.2849604777688484        ,
 3.2849604772901433        ,
 3.284960477033293         ,
 3.284960476955292         ,
 3.28496047702188          ]
m1c_d = [6.252420406633199			,
 6.310183969383746         ,
 6.192448569413741         ,
 5.855482184116387         ,
 5.449887208324485         ,
 5.100637035760679         ,
 4.810886142589796         ,
 4.528503712777621         ,
 4.265276325312147         ,
 4.038071977352335         ,
 3.8495091548520395        ,
 3.6917930004344557        ,
 3.561036937397751         ,
 3.4558917704376353        ,
 3.3716513177424874        ,
 3.304823031503693         ,
 3.2522117770913623        ,
 3.210675147509666         ,
 3.177895783092168         ,
 3.152586517769211         ,
 3.1326736954686836        ,
 3.1170837286254964        ,
 3.105102367228268         ,
 3.09556168065981          ,
 3.087927923806148         ,
 3.0822094827989344        ,
 3.0780537243479893        ,
 3.074796853182954         ,
 3.072064717237894         ,
 3.0698102134989753        ,
 3.0680639484013796        ,
 3.0667881074399546        ,
 3.065869714701253         ,
 3.0651929571304835        ,
 3.0646754981313284        ,
 3.0642671857101127        ,
 3.063938401626704         ,
 3.0636709098138177        ,
 3.0634524864007773        ,
 3.0632741901326876        ,
 3.0631290971191447        ,
 3.0630114231403898        ,
 3.062916259758366         ,
 3.0628394582940994        ,
 3.0627775003313253        ,
 3.0627275194981194        ,
 3.0626871850722783        ,
 3.0626546130558903        ,
 3.062628295210062         ,
 3.062607019277727         ,
 3.0625898090385983        ,
 3.062575889649337         ,
 3.0625646321129154        ,
 3.0625555285696375        ,
 3.0625481696472363        ,
 3.0625422196990337        ,
 3.062537409989989         ,
 3.062533522910475         ,
 3.062530381742206         ,
 3.0625278437558454        ,
 3.0625257931076337        ,
 3.0625241357403716        ,
 3.0625227965821016        ,
 3.0625217145226102        ,
 3.0625208402009556        ,
 3.062520133876303         ,
 3.0625195630371858        ,
 3.0625191017151128        ,
 3.0625187289298115        ,
 3.062518427676715         ,
 3.062518184242265         ,
 3.0625179875078943        ,
 3.0625178284525956        ,
 3.062517699879487         ,
 3.06251759593182          ,
 3.0625175118798404        ,
 3.062517443916108         ,
 3.062517388926172         ,
 3.0625173444226546        ,
 3.062517308396204         ,
 3.0625172792183153        ,
 3.0625172555758553        ,
 3.0625172364042124        ,
 3.0625172208396685        ,
 3.0625172081931895        ,
 3.0625171979041           ,
 3.0625171895195997        ,
 3.06251718267517          ,
 3.0625171770727033        ,
 3.0625171724740867        ,
 3.062517168686916         ,
 3.0625171655553687        ,
 3.0625171629536974        ,
 3.0625171607799757        ,
 3.062517158951578         ,
 3.062517157402515         ,
 3.062517156079118         ,
 3.0625171549380386        ,
 3.062517153944386         ,
 3.0625171530696194        ,
 3.0625171522909507        ]
m1c_l = [4.168278573444684         ,
 4.18963750979681          ,
 4.104364939105732         ,
 3.869642587562936         ,
 3.59269606301755          ,
 3.357334537255335         ,
 3.1625404284217775        ,
 2.972738556305105         ,
 2.7973845085869677        ,
 2.6466440519737016        ,
 2.521636511282772         ,
 2.4172287103386836        ,
 2.3307359792035656        ,
 2.2613199886221618        ,
 2.205769594833319         ,
 2.1617228783077187        ,
 2.1270897043525574        ,
 2.099757016716317         ,
 2.0782062983124265        ,
 2.061569696749881         ,
 2.048496199351673         ,
 2.0382589091263648        ,
 2.0303957081371053        ,
 2.02414011101475          ,
 2.0191331202216865        ,
 2.0153788365503598        ,
 2.0126526858736153        ,
 2.0105198938250135        ,
 2.0087317391968282        ,
 2.007255280038389         ,
 2.006110657476338         ,
 2.0052741154185694        ,
 2.0046722051988666        ,
 2.004228998375823         ,
 2.003890371824955         ,
 2.0036233131787617        ,
 2.003408334204037         ,
 2.003233456261551         ,
 2.003090664391931         ,
 2.0029741051521945        ,
 2.002879251329828         ,
 2.0028023226151173        ,
 2.0027401112421526        ,
 2.0026899055578853        ,
 2.0026494052459594        ,
 2.0026167360010048        ,
 2.0025903736374593        ,
 2.002569086044897         ,
 2.0025518868913257        ,
 2.0025379834787356        ,
 2.0025267374934326        ,
 2.00251764237799          ,
 2.002510286947305         ,
 2.0025043392281643        ,
 2.002499531644857         ,
 2.0024956448116837        ,
 2.00249250308856          ,
 2.002489964256779         ,
 2.002487912822929         ,
 2.0024862555093668        ,
 2.0024849166119716        ,
 2.002483834663608         ,
 2.00248296060917          ,
 2.002482254517043         ,
 2.0024816841340636        ,
 2.0024812234944265        ,
 2.002480851355852         ,
 2.0024805507522605        ,
 2.002480307977376         ,
 2.0024801119224827        ,
 2.002479953629114         ,
 2.002479825834395         ,
 2.0024797226456332        ,
 2.0024796393621838        ,
 2.0024795721587854        ,
 2.002479517946356         ,
 2.002479474238353         ,
 2.002479439000832         ,
 2.0024794106094643        ,
 2.0024793877521696        ,
 2.0024793693656258        ,
 2.0024793545923956        ,
 2.0024793427374146        ,
 2.0024793332367885        ,
 2.00247932564069          ,
 2.002479319583096         ,
 2.002479314768429         ,
 2.002479310958782         ,
 2.0024793079595424        ,
 2.002479305615284         ,
 2.002479303800489         ,
 2.0024793024134158        ,
 2.002479301372048         ,
 2.0024793006098602        ,
 2.002479300072899         ,
 2.0024792997181557        ,
 2.002479299510601         ,
 2.0024792994219442        ,
 2.0024792994294485        ,
 2.0024792995144725        ,
 2.002479299662168         ]
m2c_d = [3.133637080729954			,
 3.0886758443399724        ,
 3.0446041201201797        ,
 2.9504154118299           ,
 2.8432963729362024        ,
 2.7480322697860005        ,
 2.6624068131040426        ,
 2.5769062552540816        ,
 2.496361236908738         ,
 2.4254110517881062        ,
 2.364765170649603         ,
 2.3128921835122243        ,
 2.269405408921169         ,
 2.233874136838485         ,
 2.2050893954943027        ,
 2.1820502403206423        ,
 2.1637200129874925        ,
 2.1491978191207717        ,
 2.1377347878853765        ,
 2.1288341483882953        ,
 2.1218231668599605        ,
 2.116361156920892         ,
 2.1121290263899066        ,
 2.1087685030828776        ,
 2.106128628894637         ,
 2.1041612032142427        ,
 2.102694898360078         ,
 2.1015280053346657        ,
 2.100564087215103         ,
 2.099791455198583         ,
 2.099204947256696         ,
 2.0987774100891476        ,
 2.0984662109743946        ,
 2.098233523860333         ,
 2.0980537297786475        ,
 2.0979112101631183        ,
 2.09779645655734          ,
 2.097703360082791         ,
 2.0976276516617216        ,
 2.0975661124581015        ,
 2.0975162143670865        ,
 2.0974758492839083        ,
 2.097443250536339         ,
 2.097416949200187         ,
 2.0973957178718354        ,
 2.097378569751478         ,
 2.097364709482235         ,
 2.097353497416969         ,
 2.0973444227400075        ,
 2.097337074736995         ,
 2.097331122108502         ,
 2.097326301506864         ,
 2.0973223984635068        ,
 2.097319239273796         ,
 2.097316683546082         ,
 2.097314615760183         ,
 2.097312943310537         ,
 2.0973115910672138        ,
 2.0973104979029795        ,
 2.0973096143829713        ,
 2.097308900322041         ,
 2.0973083230579457        ,
 2.0973078565244503        ,
 2.09730747948441          ,
 2.097307174772906         ,
 2.097306928566967         ,
 2.097306729544299         ,
 2.097306568667685         ,
 2.0973064386346465        ,
 2.0973063335240605        ,
 2.09730624856031          ,
 2.0973061798693804        ,
 2.097306124307348         ,
 2.097306079367905         ,
 2.097306043010737         ,
 2.097306013587781         ,
 2.097305989772465         ,
 2.097305970478645         ,
 2.097305954839675         ,
 2.097305942155451         ,
 2.097305931858447         ,
 2.097305923491043         ,
 2.097305916682063         ,
 2.097305911130333         ,
 2.0973059065957873        ,
 2.097305902883025         ,
 2.0973058998342125        ,
 2.097305897322312         ,
 2.097305895243328         ,
 2.097305893514273         ,
 2.097305892068107         ,
 2.097305890850503         ,
 2.0973058898176338        ,
 2.0973058889339633        ,
 2.097305888170673         ,
 2.0973058875047625        ,
 2.0973058869175287        ,
 2.09730588639386          ,
 2.0973058859215943        ,
 2.0973058854907736        ,
 2.097305885093456         ]
m2c_l = [2.08908967161792          ,
 2.043845783082732         ,
 2.010606782205073         ,
 1.9437531421116816        ,
 1.869850489392652         ,
 1.805061542411783         ,
 1.747004022974054         ,
 1.689240084522992         ,
 1.6354400036812442        ,
 1.588224868771491         ,
 1.5479169231337344        ,
 1.5135087121970068        ,
 1.4847091561490622        ,
 1.4612330660267792        ,
 1.4422378055546206        ,
 1.4270463336056243        ,
 1.4149759575854521        ,
 1.4054196197713655        ,
 1.3978824596195416        ,
 1.3920339814780383        ,
 1.3874314951251472        ,
 1.3838461149584855        ,
 1.3810701506821534        ,
 1.3788672705820981        ,
 1.3771361732715912        ,
 1.375845634372516         ,
 1.3748849065638058        ,
 1.3741213465703177        ,
 1.3734907410382893        ,
 1.3729849932019393        ,
 1.3726008735156983        ,
 1.3723208879978932        ,
 1.3721172231075578        ,
 1.3719650646121766        ,
 1.3718475783573651        ,
 1.3717544934665735        ,
 1.371679563638869         ,
 1.3716187834521625        ,
 1.371569358672084         ,
 1.3715291852703002        ,
 1.3714966124049717        ,
 1.371470263782205         ,
 1.3714489860228585        ,
 1.3714318200240885        ,
 1.3714179641614204        ,
 1.3714067739706592        ,
 1.3713977300275588        ,
 1.3713904146146079        ,
 1.3713844941866873        ,
 1.371379700592852         ,
 1.371375817544481         ,
 1.371372673164836         ,
 1.3713701274825885        ,
 1.3713680671397959        ,
 1.371366400524769         ,
 1.371365052248509         ,
 1.3713639618846898        ,
 1.371363080412662         ,
 1.371362367948244         ,
 1.3713617922372965        ,
 1.3713613270609926        ,
 1.3713609511078841        ,
 1.3713606473739417        ,
 1.3713604020050116        ,
 1.3713602038041308        ,
 1.371360043754973         ,
 1.371359914471764         ,
 1.371359810060308         ,
 1.3713597257582462        ,
 1.3713596577041887        ,
 1.3713596027839485        ,
 1.371359558471367         ,
 1.3713595227163131        ,
 1.3713594938848102        ,
 1.37135947064668          ,
 1.3713594519275338        ,
 1.3713594368626498        ,
 1.3713594247439729        ,
 1.371359415006631         ,
 1.3713594071943584        ,
 1.3713594009372987        ,
 1.3713593959372286        ,
 1.371359391952292         ,
 1.3713593887862385        ,
 1.3713593862826636        ,
 1.3713593843142646        ,
 1.3713593827782247        ,
 1.3713593815918002        ,
 1.3713593806872388        ,
 1.3713593800104922        ,
 1.371359379517908         ,
 1.3713593791741012        ,
 1.3713593789505443        ,
 1.3713593788240923        ,
 1.3713593787759686        ,
 1.371359378791222         ,
 1.3713593788576675        ,
 1.3713593789654706        ,
 1.371359379106719         ,
 1.3713593792749266        ,
 1.3713593794649297        ]
m3c_d = [1.5744424940516137		,
 1.5312109841175503        ,
 1.53199785279045          ,
 1.5339423776904326        ,
 1.5362957999326035        ,
 1.5382578794265116        ,
 1.5397586155680854        ,
 1.5412089022703575        ,
 1.542555124446232         ,
 1.5437508885700268        ,
 1.544750486093638         ,
 1.5455896795827229        ,
 1.5463038749753995        ,
 1.546879472312436         ,
 1.5473424513902563        ,
 1.5477139344836859        ,
 1.5480057712876742        ,
 1.5482372530377546        ,
 1.5484224099756925        ,
 1.5485642024750392        ,
 1.5486746607051098        ,
 1.5487622683052218        ,
 1.5488280350735255        ,
 1.5488806036202754        ,
 1.548924653605515         ,
 1.548958056968583         ,
 1.5489805158672285        ,
 1.5489972714051314        ,
 1.5490120264954466        ,
 1.5490252651269176        ,
 1.5490360303734467        ,
 1.549043870125382         ,
 1.5490492818530865        ,
 1.549053051673212         ,
 1.5490558017620117        ,
 1.5490579144887382        ,
 1.5490595993507295        ,
 1.549060973593093         ,
 1.5490621056087595        ,
 1.5490630373315502        ,
 1.549063801651437         ,
 1.5490644247593657        ,
 1.5490649297410877        ,
 1.5490653378122081        ,
 1.5490656662027305        ,
 1.549065930168933         ,
 1.549066142384666         ,
 1.549066313044365         ,
 1.549066450493043         ,
 1.5490665613440104        ,
 1.5490666506669766        ,
 1.549066722713888         ,
 1.5490667808228422        ,
 1.549066827681154         ,
 1.5490668655201043        ,
 1.5490668960224132        ,
 1.5490669206016372        ,
 1.549066940404396         ,
 1.5490669563459862        ,
 1.549066969181598         ,
 1.5490669795158352        ,
 1.5490669878151764        ,
 1.5490669944780016        ,
 1.5490669998187354        ,
 1.549067004091861         ,
 1.5490670075095208        ,
 1.549067010231113         ,
 1.5490670123909336        ,
 1.5490670140978349        ,
 1.5490670154386106        ,
 1.5490670164848752        ,
 1.5490670172939343        ,
 1.5490670179099557        ,
 1.5490670183707242        ,
 1.5490670187060576        ,
 1.5490670189400915        ,
 1.5490670190929556        ,
 1.549067019179772         ,
 1.5490670192132807        ,
 1.5490670192038185        ,
 1.5490670191596156        ,
 1.5490670190874753        ,
 1.5490670189928344        ,
 1.549067018879878         ,
 1.5490670187521962        ,
 1.5490670186126165        ,
 1.5490670184634312        ,
 1.5490670183065482        ,
 1.5490670181434034        ,
 1.5490670179752035        ,
 1.5490670178029287        ,
 1.5490670176273587        ,
 1.5490670174491437        ,
 1.549067017268795         ,
 1.549067017086714         ,
 1.5490670169032323        ,
 1.5490670167186278        ,
 1.5490670165331095        ,
 1.5490670163468623        ,
 1.549067016160024         ,
 1.549067015972705         ]
m3c_l = [1.0496270366842968		,
 1.0099023147824593        ,
 1.0083008511535285        ,
 1.0077306699381112        ,
 1.0080503145365374        ,
 1.008456099459813         ,
 1.008666296503465         ,
 1.0090088364445564        ,
 1.0095221079181733        ,
 1.0100324769719191        ,
 1.0104759039627687        ,
 1.0108729755082364        ,
 1.0112383718351685        ,
 1.0115504837329088        ,
 1.0118102114945278        ,
 1.0120251591947957        ,
 1.012199017853014         ,
 1.0123404850215916        ,
 1.0124562106903192        ,
 1.0125467119696898        ,
 1.0126182823234806        ,
 1.012675783616699         ,
 1.0127194938900088        ,
 1.0127546919750414        ,
 1.0127843477796712        ,
 1.0128071225285098        ,
 1.0128226893223637        ,
 1.0128344020092042        ,
 1.0128447016822084        ,
 1.0128539302743034        ,
 1.012861465092556         ,
 1.0128670064954082        ,
 1.0128708824720165        ,
 1.012873618819871         ,
 1.0128756377778125        ,
 1.0128771998347361        ,
 1.0128784498642578        ,
 1.0128794707902058        ,
 1.012880311964787         ,
 1.0128810044534176        ,
 1.0128815728921092        ,
 1.0128820368648042        ,
 1.0128824135569323        ,
 1.0128827186159377        ,
 1.0128829646834008        ,
 1.0128831629739232        ,
 1.0128833227970797        ,
 1.0128834516570058        ,
 1.0128835557145626        ,
 1.012883639849353         ,
 1.0128837078260584        ,
 1.0128837628121397        ,
 1.0128838072991837        ,
 1.012883843300245         ,
 1.012883872485034         ,
 1.0128838961153728        ,
 1.012883915255444         ,
 1.0128839307688304        ,
 1.012883943346512         ,
 1.0128839535593381        ,
 1.0128839618633068        ,
 1.0128839686124174        ,
 1.0128839741090996        ,
 1.0128839785924049        ,
 1.012883982256375         ,
 1.0128839852624154        ,
 1.0128839877322244        ,
 1.0128839897686404        ,
 1.0128839914550547        ,
 1.0128839928581337        ,
 1.0128839940329417        ,
 1.0128839950234527        ,
 1.0128839958637996        ,
 1.0128839965831653        ,
 1.012883997204619         ,
 1.012883997746891         ,
 1.0128839982255666        ,
 1.0128839986524043        ,
 1.0128839990373373        ,
 1.0128839993884289        ,
 1.0128839997121168        ,
 1.012884000013724         ,
 1.0128840002975033        ,
 1.012884000566758         ,
 1.012884000824307         ,
 1.01288400107238          ,
 1.0128840013127907        ,
 1.0128840015470446        ,
 1.0128840017762806        ,
 1.01288400200146          ,
 1.0128840022233618        ,
 1.012884002442609         ,
 1.0128840026597181        ,
 1.0128840028751012        ,
 1.0128840030890762        ,
 1.0128840033019166        ,
 1.0128840035138407        ,
 1.012884003725022         ,
 1.0128840039356082        ,
 1.0128840041457066        ,
 1.0128840043554144        ]
Sc_d =  [1.0003191332838606		,
  1.0239139859548005        ,
  1.0241414873537167        ,
  1.0237521889901051        ,
  1.0229960079672755        ,
  1.0223245722634995        ,
  1.021838876517093         ,
  1.0213305895216638        ,
  1.0208026271489168        ,
  1.02031761877994          ,
  1.0199075237936277        ,
  1.0195560962169596        ,
  1.019249312540432         ,
  1.0189969942763044        ,
  1.0187915183522527        ,
  1.0186247823124077        ,
  1.0184923515389175        ,
  1.018386299137236         ,
  1.0183007032703908        ,
  1.0182346597012506        ,
  1.0181828613973443        ,
  1.0181415862692682        ,
  1.0181104448061087        ,
  1.0180854598034206        ,
  1.0180644791829505        ,
  1.0180485070392649        ,
  1.0180376983128496        ,
  1.01802959304943          ,
  1.0180224541776228        ,
  1.0180160553291353        ,
  1.018010847636605         ,
  1.0180070422818537        ,
  1.0180044013526066        ,
  1.0180025506171537        ,
  1.0180011934896784        ,
  1.0180001473558857        ,
  1.0179993116774784        ,
  1.017998629657488         ,
  1.0179980677054217        ,
  1.017997605170096         ,
  1.0179972256451306        ,
  1.017996916089541         ,
  1.017996665051919         ,
  1.0179964619970947        ,
  1.0179962984248971        ,
  1.0179961668048008        ,
  1.0179960608710812        ,
  1.0179959755872396        ,
  1.0179959068266708        ,
  1.0179958513055083        ,
  1.0179958065177201        ,
  1.0179957703482063        ,
  1.0179957411369258        ,
  1.0179957175476466        ,
  1.0179956984665315        ,
  1.0179956830559178        ,
  1.017995670611088         ,
  1.0179956605590532        ,
  1.0179956524426932        ,
  1.0179956458847688        ,
  1.0179956405820396        ,
  1.0179956363018259        ,
  1.0179956328442918        ,
  1.0179956300518096        ,
  1.0179956277968707        ,
  1.0179956259727954        ,
  1.0179956244996131        ,
  1.0179956233098824        ,
  1.0179956223487974        ,
  1.0179956215726844        ,
  1.0179956209455032        ,
  1.0179956204382936        ,
  1.0179956200288496        ,
  1.0179956196980728        ,
  1.0179956194309019        ,
  1.0179956192151487        ,
  1.0179956190406125        ,
  1.017995618899647         ,
  1.0179956187858012        ,
  1.0179956186938324        ,
  1.0179956186195624        ,
  1.0179956185595436        ,
  1.0179956185110044        ,
  1.0179956184718209        ,
  1.017995618440165         ,
  1.0179956184145962        ,
  1.017995618393948         ,
  1.0179956183772443        ,
  1.017995618363753         ,
  1.0179956183528576        ,
  1.0179956183440555        ,
  1.0179956183369474        ,
  1.0179956183312031        ,
  1.0179956183265577        ,
  1.0179956183228074        ,
  1.0179956183197778        ,
  1.0179956183173307        ,
  1.0179956183153545        ,
  1.0179956183137557        ,
  1.0179956183124645        ,
  1.0179956183114214        ]
Sc_l =  [1.0002138685436608        ,
  1.0239581385502765        ,
  1.0241950896009975        ,
  1.023800787226675         ,
  1.023032893853863         ,
  1.0223542692425716        ,
  1.0218644533892707        ,
  1.0213505368117932        ,
  1.0208182835358144        ,
  1.0203305167839354        ,
  1.0199178516468745        ,
  1.0195644058413176        ,
  1.0192556455657953        ,
  1.0190018242971015        ,
  1.0187952390574453        ,
  1.01862761358216          ,
  1.0184945217386272        ,
  1.018387932231714         ,
  1.0183019757819483        ,
  1.0182355738914317        ,
  1.0181835861229962        ,
  1.0181421254444905        ,
  1.0181108470879439        ,
  1.0180857907575902        ,
  1.0180647470260569        ,
  1.0180486884627022        ,
  1.0180378163319075        ,
  1.0180296900588846        ,
  1.0180225436258918        ,
  1.0180161324907104        ,
  1.0180109061620584        ,
  1.0180070820793423        ,
  1.0180044275078135        ,
  1.0180025686734167        ,
  1.0180012066744402        ,
  1.0180001575908237        ,
  1.0179993199114312        ,
  1.0179986363041753        ,
  1.0179980732255542        ,
  1.017997609705233         ,
  1.0179972293503727        ,
  1.017996919102777         ,
  1.0179966674526901        ,
  1.0179964639173122        ,
  1.017996299965123         ,
  1.017996168033914         ,
  1.0179960618552584        ,
  1.0179959763745716        ,
  1.0179959074477403        ,
  1.0179958518057879        ,
  1.0179958069176978        ,
  1.0179957706682936        ,
  1.017995741393743         ,
  1.0179957177502992        ,
  1.0179956986275907        ,
  1.0179956831844137        ,
  1.0179956707127666        ,
  1.017995660639496         ,
  1.0179956525058809        ,
  1.0179956459331014        ,
  1.0179956406196804        ,
  1.0179956363304894        ,
  1.0179956328657935        ,
  1.0179956300676432        ,
  1.0179956278078157        ,
  1.0179956259800096        ,
  1.017995624503918         ,
  1.0179956233117866        ,
  1.0179956223488043        ,
  1.0179956215711488        ,
  1.0179956209426326        ,
  1.0179956204344722        ,
  1.0179956200242266        ,
  1.0179956196928115        ,
  1.0179956194251365        ,
  1.0179956192089463        ,
  1.0179956190340782        ,
  1.0179956188928545        ,
  1.0179956187787955        ,
  1.017995618686659         ,
  1.0179956186122527        ,
  1.0179956185521153        ,
  1.0179956185034924        ,
  1.017995618464238         ,
  1.017995618432526         ,
  1.0179956184069132        ,
  1.0179956183862262        ,
  1.0179956183694934        ,
  1.0179956183559797        ,
  1.0179956183450654        ,
  1.0179956183362486        ,
  1.0179956183291285        ,
  1.0179956183233743        ,
  1.0179956183187215        ,
  1.017995618314965         ,
  1.0179956183119305        ,
  1.0179956183094794        ,
  1.0179956183075           ,
  1.017995618305899         ,
  1.0179956183046057        ,
  1.0179956183035612        ]

const = 1
m0c_d = [x/const for x in m0c_d]
m0c_l = [x/const for x in m0c_l]

m1c_d = [x/const for x in m1c_d]
m1c_l = [x/const for x in m1c_l]

m2c_d = [x/const for x in m2c_d]
m2c_l = [x/const for x in m2c_l]

m3c_d = [x/const for x in m3c_d]
m3c_l = [x/const for x in m3c_l]

diff_m3=[]
zip_object = zip(m3c_d, m3c_l)
for m3c_d_i, m3c_l_i in zip_object:
    diff_m3.append(m3c_d_i-m3c_l_i)
sum_m3 = [sum(x) for x in zip(m3c_d, m3c_l)]

eec = [m/n for m, n in zip(diff_m3,sum_m3)]


pp.figure(9)
#Change the figure size
pp.figure(figsize=[16, 12])
pp.subplot(2,2,1)
pp.plot(r.t,r.y[0,:]/initial_m_d[0],'.r',r.t,np.array(m0c_d)/initial_m_d[0],'-b')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('m0(t)/m0(0)',{"fontsize":16})
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.title('(a) Evolution of zeroth moment',fontsize=15)
pp.subplot(2,2,2)
pp.plot(r.t,r.y[1,:]/initial_m_d[1],'.r',r.t,np.array(m1c_d)/initial_m_d[1],'-b')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('m1(t)/m1(0)',{"fontsize":16})
pp.title('(b) Evolution of first moment',fontsize=15)
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.subplot(2,2,3)
pp.plot(r.t,r.y[2,:]/initial_m_d[2],'.r',r.t,np.array(m2c_d)/initial_m_d[2],'-b')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('m2(t)/m2(0)',{"fontsize":16})
pp.title('(c) Evolution of second moment',fontsize=15)
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.subplot(2,2,4)
pp.plot(r.t,r.y[3,:]/initial_m_d[3],'.r',r.t,np.array(m3c_d)/initial_m_d[3],'-b')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('m3(t)/m3(0)',{"fontsize":16})
pp.title('(d) Evolution of third moment',fontsize=15)
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.suptitle('Enantiomer D', x=0.5, y=0.95, fontsize=17, fontweight='700',)

pp.figure(10)
#Change the figure size
pp.figure(figsize=[16, 12])
pp.subplot(2,2,1)
pp.plot(r.t,r.y[4,:]/initial_m_l[0],'.r',r.t,np.array(m0c_l)/initial_m_l[0],'-b')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('m0(t)/m0(0)',{"fontsize":16})
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.title('(a) Evolution of zeroth moment',fontsize=15)
pp.subplot(2,2,2)
pp.plot(r.t,r.y[5,:]/initial_m_l[1],'.r',r.t,np.array(m1c_l)/initial_m_l[1],'-b')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('m1(t)/m1(0)',{"fontsize":16})
pp.title('(b) Evolution of first moment',fontsize=15)
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.subplot(2,2,3)
pp.plot(r.t,r.y[6,:]/initial_m_l[2],'.r',r.t,np.array(m2c_l)/initial_m_l[2],'-b')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('m2(t)/m2(0)',{"fontsize":16})
pp.title('(c) Evolution of second moment',fontsize=15)
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.subplot(2,2,4)
pp.plot(r.t,r.y[7,:]/initial_m_l[3],'.r',r.t,np.array(m3c_l)/initial_m_l[3],'-b')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('m3(t)/m3(0)',{"fontsize":16})
pp.title('(d) Evolution of third moment',fontsize=15)
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.suptitle('Enantiomer L', x=0.5, y=0.95, fontsize=17, fontweight='700')

'''Απόλυτο Σφάλμα χρονικής εξέλιξης ροπών'''
err0_d=[]
for i in range(len(r.y[0,:])): 
    err = np.abs(r.y[0,i]/initial_m_d[0]-m0c_d[i]/initial_m_d[0])
    err0_d.append(err)

err1_d=[]
for i in range(len(r.y[1,:])): 
    err = np.abs(r.y[1,i]/initial_m_d[1]-m1c_d[i]/initial_m_d[1])
    err1_d.append(err)
    
err2_d=[]
for i in range(len(r.y[2,:])): 
    err = np.abs(r.y[2,i]/initial_m_d[2]-m2c_d[i]/initial_m_d[2])
    err2_d.append(err)

err3_d=[]
for i in range(len(r.y[3,:])): 
    err = np.abs(r.y[3,i]/initial_m_d[3]-m3c_d[i]/initial_m_d[3])
    err3_d.append(err)
    
pp.figure(11)
#Change the figure size
pp.figure(figsize=[16, 12])
pp.subplot(2,2,1)
pp.plot(r.t,err0_d)
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Absolute error',{"fontsize":16})
pp.title('(a) Zeroth moment',fontsize=15)
pp.subplot(2,2,2)
pp.plot(r.t,err1_d)
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Absolute error',{"fontsize":16})
pp.title('(b) First moment',fontsize=15)
pp.subplot(2,2,3)
pp.plot(r.t,err2_d)
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Absolute error',{"fontsize":16})
pp.title('(c) Second moment',fontsize=15)
pp.subplot(2,2,4)
pp.plot(r.t,err3_d)
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Absolute error',{"fontsize":16})
pp.title('(d) Third moment',fontsize=15)
pp.suptitle('Enantiomer D', x=0.5, y=0.95, fontsize=17, fontweight='700',)


err0_l=[]
for i in range(len(r.y[4,:])): 
    err = np.abs(r.y[4,i]/initial_m_l[0]-m0c_l[i]/initial_m_l[0])
    err0_l.append(err)

err1_l=[]
for i in range(len(r.y[5,:])): 
    err = np.abs(r.y[5,i]/initial_m_l[1]-m1c_l[i]/initial_m_l[1])
    err1_l.append(err)
    
err2_l=[]
for i in range(len(r.y[6,:])): 
    err = np.abs(r.y[6,i]/initial_m_l[2]-m2c_l[i]/initial_m_l[2])
    err2_l.append(err)

err3_l=[]
for i in range(len(r.y[7,:])): 
    err = np.abs(r.y[7,i]/initial_m_l[3]-m3c_l[i]/initial_m_l[3])
    err3_l.append(err)
    
pp.figure(12)
#Change the figure size
pp.figure(figsize=[16, 12])
pp.subplot(2,2,1)
pp.plot(r.t,err0_l)
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Absolute error',{"fontsize":16})
pp.title('(a) Zeroth moment',fontsize=15)
pp.subplot(2,2,2)
pp.plot(r.t,err1_l)
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Absolute error',{"fontsize":16})
pp.title('(b) First moment',fontsize=15)
pp.subplot(2,2,3)
pp.plot(r.t,err2_l)
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Absolute error',{"fontsize":16})
pp.title('(c) Second moment',fontsize=15)
pp.subplot(2,2,4)
pp.plot(r.t,err3_l)
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Absolute error',{"fontsize":16})
pp.title('(d) Third moment',fontsize=15)
pp.suptitle('Enantiomer L', x=0.5, y=0.95, fontsize=17, fontweight='700',)

'''Κατανομές maxent και comsol για την τελευταία χρονική στιγμή'''
Lmin=0
Lmax=1.4
bnds=[Lmin,Lmax]

pp.figure(13)
pp.figure(figsize=[10, 8])
mulast_d=[r.y[0,-1],r.y[1,-1],r.y[2,-1],r.y[3,-1]]
sollast_d, lambdaslast=maxent_reconstruct_c0_1(mu=mulast_d,bnds=bnds)

mulast_l=[r.y[4,-1],r.y[5,-1],r.y[6,-1],r.y[7,-1]]
sollast_l, lambdaslast=maxent_reconstruct_c0_2(mu=mulast_l,bnds=bnds)

'''reconstructed distribution from comsol moments at last time step'''
mu_comsol_d = [m0c_d[-1],m1c_d[-1],m2c_d[-1],m3c_d[-1]]
mu_comsol_l = [m0c_l[-1],m1c_l[-1],m2c_l[-1],m3c_l[-1]]

sol_comsol_d, lambdas_comsol_d = maxent_reconstruct_c0_1(mu=mu_comsol_d,bnds=bnds)
sol_comsol_l, lambdas_comsol_l = maxent_reconstruct_c0_2(mu=mu_comsol_l,bnds=bnds)

L=np.linspace(0,2)
pp.plot(L,sollast_d(L),'-b,', L,sollast_l(L),'-g',L,sol_comsol_d(L),'-r,', L,sol_comsol_l(L),'-y')
pp.title('t = 20 s')
pp.xlabel('L (μm)',{"fontsize":16})
pp.ylabel('n #/mLμL',{"fontsize":16})
pp.legend(('maxent f (D)','maxent f (L)', 'Comsol f (D)','Comsol f (L)'),loc=0)

'''Σύγκριση Υπερκορεσμών'''
pp.figure(13)
#Change the figure size
pp.figure(figsize=[16, 12])
pp.subplot(2,2,1)
pp.plot(r.t,r.y[8,:],'.r',r.t,Sc_d,'-b')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Sinf',{"fontsize":16})
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.title('(a) Evolution of Superssaturation (D)',fontsize=15)
pp.subplot(2,2,2)
pp.plot(r.t,r.y[9,:],'.r',r.t,Sc_l,'-b')
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Sinf',{"fontsize":16})
pp.title('(b) Evolution of Superssaturation (L)',fontsize=15)
pp.legend(('Maximum Entropy','Finite Elements (Comsol)'),loc='upper right',borderaxespad=0.1, fontsize=15)
pp.subplot(2,2,3)
pp.plot(r.t,np.abs(r.y[8,:]-Sc_d)/Sc_d*100)
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Percentage error',{"fontsize":16})
pp.title('(c) Relative error of Supersaturation (D)',fontsize=15)
pp.subplot(2,2,4)
pp.plot(r.t,np.abs(r.y[9,:]-Sc_l)/Sc_l*100)
pp.xlabel('t(min)',{"fontsize":16})
pp.ylabel('Percentage error',{"fontsize":16})
pp.title('(d) Relative error of Supersaturation (L)',fontsize=15)
